1. created tables for projects, data and vector_chunks (of the data

2. Implemented Encryption Utilities:
Key Implementation Details
Key Management:

The EncryptionService class integrates with your existing authentication system by using the symmetric key from authStore to encrypt the DCPE keys
DCPE keys are generated once, then encrypted and stored in localStorage
On subsequent sessions, the encrypted DCPE keys are retrieved and decrypted using the user's symmetric key
Encryption Functions:

encryptText: Standard encryption for document content
encryptMetadata: Deterministic encryption for metadata (allows exact matching while encrypted)
encryptVector: Specialized encryption for vector embeddings that preserves search capabilities
React Integration:

useEncryptionService hook provides a React-friendly way to access the encryption service
Automatically initializes when the symmetric key is available
Includes loading and error states for UI feedback
Automatically clears encryption state on logout
Standalone Utilities:

Functions like encryptText, encryptMetadata, and encryptVector can be used outside React components
Each function checks if the service is initialized and initializes it if needed

3. Created PDF Processing Utilities:
PDF Validation: validatePdfFile: Checks if a file is a PDF and within the 5MB size limit
Text Extraction: extractTextFromPdf: Extracts text and metadata from a PDF file using PDFLoader
Chunking: chunkText: Splits text into chunks with configurable size and overlap
Complete Processing Pipeline: processPdfFile: An end-to-end function that validates, extracts, and chunks a PDF file

The utilities are designed to work client-side, which aligns with zero-trust and client-side processing requirements. PDF extraction is performed entirely in the browser without sending the file to any server.
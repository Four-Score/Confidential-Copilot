-- First, enable the pgvector extension if not already enabled
CREATE EXTENSION IF NOT EXISTS vector;

-- Create vector_chunks table with specified fields
CREATE TABLE public.vector_chunks (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  document_id UUID NOT NULL REFERENCES public.documents(id) ON DELETE CASCADE,
  chunk_number INTEGER NOT NULL,
  encrypted_chunk_content TEXT, -- Will store standard encrypted chunk content
  encrypted_embeddings VECTOR(384), -- 384 dimensions for MiniLM-L6-v2 model
  metadata JSONB, -- Will store deterministically encrypted metadata (page number, position)
  
  -- Ensure chunks for a document have unique chunk numbers
  UNIQUE(document_id, chunk_number)
);

-- Add index on document_id for faster lookups
CREATE INDEX idx_vector_chunks_document_id ON public.vector_chunks(document_id);

-- Create a HNSW index for vector similarity search using cosine distance
-- This will significantly improve performance for vector searches
CREATE INDEX ON public.vector_chunks
USING hnsw (encrypted_embeddings vector_cosine_ops)
WITH (m = 16, ef_construction = 64);

-- Enable Row Level Security
ALTER TABLE public.vector_chunks ENABLE ROW LEVEL SECURITY;

-- Create RLS policies
-- Users can only access vector chunks belonging to their documents
CREATE POLICY "Users can select their own vector chunks" 
  ON public.vector_chunks FOR SELECT 
  USING (
    document_id IN (
      SELECT d.id FROM public.documents d
      JOIN public.projects p ON d.project_id = p.id
      WHERE p.user_id = auth.uid()
    )
  );

CREATE POLICY "Users can insert vector chunks into their documents" 
  ON public.vector_chunks FOR INSERT 
  WITH CHECK (
    document_id IN (
      SELECT d.id FROM public.documents d
      JOIN public.projects p ON d.project_id = p.id
      WHERE p.user_id = auth.uid()
    )
  );

CREATE POLICY "Users can update their own vector chunks" 
  ON public.vector_chunks FOR UPDATE 
  USING (
    document_id IN (
      SELECT d.id FROM public.documents d
      JOIN public.projects p ON d.project_id = p.id
      WHERE p.user_id = auth.uid()
    )
  );

CREATE POLICY "Users can delete their own vector chunks" 
  ON public.vector_chunks FOR DELETE 
  USING (
    document_id IN (
      SELECT d.id FROM public.documents d
      JOIN public.projects p ON d.project_id = p.id
      WHERE p.user_id = auth.uid()
    )
  );

-- Grant access to authenticated users
GRANT ALL ON public.vector_chunks TO authenticated;

